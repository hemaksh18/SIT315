#include <ctime>
#include <chrono>
#include <pthread.h>
#include <iostream>
#include <cstdlib>

using namespace std;
using namespace std::chrono;


struct thread {
    int threadNum;
    int** A;
    int** B;
    int** C;
    int N;
};


void FillMatrix(int** matrix, int N) 
{
    for (int i = 0; i < N; ++i)
    {
        for (int j = 0; j < N; ++j) 
        {
            matrix[i][j] = rand() % 10; // initialize with random values between 0 and 9
        }
    }
}

void* multiply(void* arg)
{
    thread* data = (thread*) arg;
    int threadNum = data->threadNum;
    int** A = data->A;
    int** B = data->B;
    int** C = data->C;
    int N = data->N;

    
    int rowSize = N / 2; // Assuming two threads
    int start = threadNum * rowSize;
    int end = (threadNum == 1) ? N : start + rowSize;

    for (int i = start; i < end; i++) {
        for (int j = 0; j < N; j++) {
            C[i][j] = 0;
            for (int k = 0; k < N; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    pthread_exit(NULL);
}


int main()
{
    int N;
    cout << "Enter the size of the matrices (N): ";
    cin >> N;

    int** A = new int*[N];
    int** B = new int*[N];
    int** C = new int*[N];
    for (int i = 0; i < N; i++)
    {
        A[i] = new int[N];
        B[i] = new int[N];
        C[i] = new int[N];
    }

    
    srand(time(0));

    FillMatrix(A, N);
    FillMatrix(B, N);

    auto start = high_resolution_clock::now();
    
    
    pthread_t threads[2]; 
    thread matrixThread[2];
    for (int i = 0; i < 2; i++) 
    {
        matrixThread[i].threadNum = i;
        matrixThread[i].A = A;
        matrixThread[i].B = B;
        matrixThread[i].C = C;
        matrixThread[i].N = N;
        pthread_create(&threads[i], NULL, multiply, (void*)&matrixThread[i]);
    }

  
    for (int i = 0; i < 2; i++) {
        pthread_join(threads[i], NULL);
    }
    
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);

   
    cout << "Execution time " << duration.count() << " microseconds." << endl;

    return 0;
}
