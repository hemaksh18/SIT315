#include <ctime>
#include <chrono>
#include <omp.h>
#include <iostream>
#include <cstdlib>

using namespace std;
using namespace std::chrono;

void FillMatrix(int** matrix, int N) 
{
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < N; ++i) 
    {
        for (int j = 0; j < N; ++j) 
        {
            matrix[i][j] = rand() % 10; 
        }
    }
}

void multiply(int** A, int** B, int** C, int N)
 {
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < N; ++i)
    {
        for (int j = 0; j < N; ++j)
        {
            C[i][j] = 0;

            for (int k = 0; k < N; ++k) 
            {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main() {


    int N;
    cout << "Enter the size of the matrices: ";
    cin >> N;


    int** A = new int*[N];
    int** B = new int*[N];
    int** C = new int*[N];

    for (int i = 0; i < N; i++)
    {
        A[i] = new int[N];
        B[i] = new int[N];
        C[i] = new int[N];
    }

    srand(time(0));


    FillMatrix(A, N);
    FillMatrix(B, N);


    auto start = high_resolution_clock::now();
    multiply(A, B, C, N);
    auto stop = high_resolution_clock::now();

    auto duration = duration_cast<microseconds>(stop - start);
   
    cout << "Execution time : " << duration.count() << " microseconds." << endl;

  
    return 0;
}
